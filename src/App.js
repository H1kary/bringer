import React, { useState, useEffect, useCallback, useMemo } from 'react';
import Character from './components/Character/Character';
import Hike from './components/Hike/Hike';
import Items from './components/Items/Items';
import HikeStatus from './components/HikeStatus/HikeStatus';
import Shop from './components/Shop/Shop';
import HikeResults from './components/HikeResults/HikeResults';
import ChooseLocation from './components/ChooseLocation/ChooseLocation';
import GameOver from './components/GameOver/GameOver';
import FoundSave from './components/FoundSave/FoundSave';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º possibleItems –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const POSSIBLE_ITEMS = [
  // –†–µ—Å—É—Ä—Å—ã
  { name: "–ì—Ä–∏–±", icon: "üçÑ", type: "resource", rarity: "common", price: 1 },
  { name: "–Ø–≥–æ–¥–∞", icon: "ü´ê", type: "resource", rarity: "common", price: 1 },
  { name: "–î—Ä–µ–≤–µ—Å–∏–Ω–∞", icon: "ü™µ", type: "resource", rarity: "common", price: 2 },
  { name: "–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞", icon: "‚õ∞Ô∏è", type: "resource", rarity: "common", price: 3 },
  { name: "–ö—Ä–∏—Å—Ç–∞–ª–ª", icon: "üíé", type: "resource", rarity: "uncommon", price: 5 },
  { name: "–ó–æ–ª–æ—Ç–∞—è —Ä—É–¥–∞", icon: "‚ú®", type: "resource", rarity: "uncommon", price: 8 },

  // –®–ª–µ–º—ã
  { name: "–ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º", icon: "ü™ñ", type: "helmet", defense: 1, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω–æ–π —à–ª–µ–º", icon: "‚õëÔ∏è", type: "helmet", defense: 2, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π —à–ª–µ–º", icon: "ü™ñ", type: "helmet", defense: 4, rarity: "rare", price: 50 },
  { name: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π —à–ª–µ–º", icon: "ü™ñ", type: "helmet", defense: 3, attack: 1, luck: 1, rarity: "epic", price: 100 },

  // –ù–∞–≥—Ä—É–¥–Ω–∏–∫–∏
  { name: "–ö–æ–∂–∞–Ω–∞—è –±—Ä–æ–Ω—è", icon: "üëï", type: "chest", defense: 2, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω–∞—è –±—Ä–æ–Ω—è", icon: "ü•ã", type: "chest", defense: 4, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è –±—Ä–æ–Ω—è", icon: "üëï", type: "chest", defense: 6, rarity: "rare", price: 50 },
  { name: "–ë—Ä–æ–Ω—è –±–µ—Ä—Å–µ—Ä–∫–∞", icon: "üëï", type: "chest", defense: 3, attack: 2, rarity: "epic", price: 100 },
  { name: "–†–æ–±–∞ –º–∞–≥–∞", icon: "üëï", type: "chest", defense: 2, attack: 3, luck: 2, rarity: "epic", price: 100 },

  // –®—Ç–∞–Ω—ã
  { name: "–ö–æ–∂–∞–Ω—ã–µ —à—Ç–∞–Ω—ã", icon: "üëñ", type: "legs", defense: 1, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω—ã–µ –ø–æ–Ω–æ–∂–∏", icon: "ü©≥", type: "legs", defense: 3, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ –ø–æ–Ω–æ–∂–∏", icon: "üëñ", type: "legs", defense: 5, rarity: "rare", price: 50 },
  { name: "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–Ω–æ–∂–∏", icon: "üëñ", type: "legs", defense: 2, attack: 1, rarity: "epic", price: 100 },

  // –ë–æ—Ç–∏–Ω–∫–∏
  { name: "–ö–æ–∂–∞–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏", icon: "üë¢", type: "boots", defense: 1, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω—ã–µ —Å–∞–ø–æ–≥–∏", icon: "ü•æ", type: "boots", defense: 2, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–µ —Å–∞–ø–æ–≥–∏", icon: "üë¢", type: "boots", defense: 4, rarity: "rare", price: 50 },
  { name: "–°–∞–ø–æ–≥–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏", icon: "üë¢", type: "boots", defense: 1, attack: 2, luck: 1, rarity: "epic", price: 100 },

  // –û—Ä—É–∂–∏–µ
  { name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –º–µ—á", icon: "üó°Ô∏è", type: "weapon", attack: 1, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á", icon: "‚öîÔ∏è", type: "weapon", attack: 3, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á", icon: "‚öîÔ∏è", type: "weapon", attack: 5, rarity: "rare", price: 50 },
  { name: "–ü–æ—Å–æ—Ö –º–∞–≥–∞", icon: "‚öîÔ∏è", type: "weapon", attack: 4, defense: 1, rarity: "epic", price: 100 },
  { name: "–¢–æ–ø–æ—Ä –±–µ—Ä—Å–µ—Ä–∫–∞", icon: "‚öîÔ∏è", type: "weapon", attack: 6, rarity: "epic", price: 100 },
  { name: "–ü—Ä–æ–∫–ª—è—Ç—ã–π –∫–ª–∏–Ω–æ–∫", icon: "‚öîÔ∏è", type: "weapon", attack: 7, defense: -2, luck: -1, rarity: "legendary", price: 200 },

  // –©–∏—Ç—ã
  { name: "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —â–∏—Ç", icon: "üõ°Ô∏è", type: "shield", defense: 1, rarity: "common", price: 10 },
  { name: "–°—Ç–∞–ª—å–Ω–æ–π —â–∏—Ç", icon: "üî∞", type: "shield", defense: 2, rarity: "uncommon", price: 25 },
  { name: "–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π —â–∏—Ç", icon: "üõ°Ô∏è", type: "shield", defense: 4, rarity: "rare", price: 50 },
  { name: "–®–∏–ø–æ–≤–∞–Ω–Ω—ã–π —â–∏—Ç", icon: "üõ°Ô∏è", type: "shield", defense: 2, attack: 1, rarity: "epic", price: 100 },
  { name: "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä", icon: "üõ°Ô∏è", type: "shield", defense: 3, attack: 1, rarity: "legendary", price: 200 },

  // –ê–º—É–ª–µ—Ç—ã
  { name: "–ú–µ–¥–Ω—ã–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 1, luck: 1, rarity: "common", price: 15 },
  { name: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 2, luck: 2, rarity: "uncommon", price: 35 },
  { name: "–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 2, luck: 3, rarity: "rare", price: 75 },
  { name: "–ê–º—É–ª–µ—Ç –º—É–¥—Ä–æ—Å—Ç–∏", icon: "üìø", type: "amulet", defense: 3, attack: 1, luck: 2, rarity: "epic", price: 150 },
  { name: "–ê–º—É–ª–µ—Ç –¥—Ä–∞–∫–æ–Ω–∞", icon: "üîÆ", type: "amulet", defense: 3, attack: 3, luck: 2, rarity: "legendary", price: 300 },

  // –ö–æ–ª—å—Ü–∞
  { name: "–ú–µ–¥–Ω–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 1, rarity: "common", price: 15 },
  { name: "–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 2, luck: 1, rarity: "uncommon", price: 35 },
  { name: "–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 2, luck: 2, rarity: "rare", price: 75 },
  { name: "–ö–æ–ª—å—Ü–æ —Å–∏–ª—ã", icon: "üíç", type: "ring", attack: 4, defense: -1, rarity: "epic", price: 150 },
  { name: "–ö–æ–ª—å—Ü–æ –≤–ª–∞—Å—Ç–∏", icon: "üëë", type: "ring", attack: 3, defense: 2, luck: 2, rarity: "legendary", price: 300 },
];

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ locations –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const locations = [
  {
    id: 'forest',
    name: '–¢—ë–º–Ω—ã–π –ª–µ—Å',
    icon: 'üå≤',
    description: '–ì—É—Å—Ç–æ–π –ª–µ—Å, –ø–æ–ª–Ω—ã–π –≥—Ä–∏–±–æ–≤ –∏ —è–≥–æ–¥. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.',
    difficulty: 1,
    rewards: [
      { name: '–õ–µ—Å–Ω—ã–µ –≥—Ä–∏–±—ã', icon: 'üçÑ', price: 1, type: 'food', healing: 15 },
      { name: '–°–æ—á–Ω—ã–µ —è–≥–æ–¥—ã', icon: 'ü´ê', price: 1, type: 'food', healing: 10 },
      { name: '–î—Ä–µ–≤–µ—Å–∏–Ω–∞', icon: 'ü™µ', price: 2, type: 'resource' },
      { name: '–ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º', icon: 'ü™ñ', rarity: 'common', type: 'helmet', defense: 1, price: 10 },
      { name: '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —â–∏—Ç', icon: 'üõ°Ô∏è', rarity: 'common', type: 'shield', defense: 1, price: 10 },
      { name: '–ö–æ–ª—å—Ü–æ –∂–∏–∑–Ω–∏', icon: 'üíç', rarity: 'uncommon', type: 'ring', healthRegen: 0.1, price: 50 },
      { name: '–ê–º—É–ª–µ—Ç —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏', icon: 'üìø', rarity: 'rare', type: 'amulet', healthRegen: 0.2, price: 100 }
    ],
    minGold: 1,
    maxGold: 5
  },
  {
    id: 'cave',
    name: '–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–µ—â–µ—Ä—ã',
    icon: '‚õ∞Ô∏è',
    description: '–î—Ä–µ–≤–Ω–∏–µ –ø–µ—â–µ—Ä—ã, –±–æ–≥–∞—Ç—ã–µ —Ä—É–¥–æ–π –∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞–º–∏. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –≤ —Ç–µ–º–Ω–æ—Ç–µ!',
    difficulty: 2,
    rewards: [
      { name: '–ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞', icon: '‚õ∞Ô∏è', price: 3, type: 'resource' },
      { name: '–ö—Ä–∏—Å—Ç–∞–ª–ª—ã', icon: 'üíé', price: 5, type: 'resource' },
      { name: '–¶–µ–ª–µ–±–Ω—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã', icon: 'üíé', price: 8, type: 'food', healing: 25 },
      { name: '–°—Ç–∞–ª—å–Ω–æ–π –º–µ—á', icon: '‚öîÔ∏è', rarity: 'uncommon', type: 'weapon', attack: 3, price: 25 },
      { name: '–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –∫–æ–ª—å—Ü–æ', icon: 'üíç', rarity: 'uncommon', type: 'ring', attack: 2, luck: 1, price: 35 }
    ],
    minGold: 3,
    maxGold: 8
  },
  {
    id: 'ruins',
    name: '–î—Ä–µ–≤–Ω–∏–µ —Ä—É–∏–Ω—ã',
    icon: 'üèõÔ∏è',
    description: '–†—É–∏–Ω—ã –¥—Ä–µ–≤–Ω–µ–π —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ü–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã.',
    difficulty: 3,
    rewards: [
      { name: '–î—Ä–µ–≤–Ω–∏–µ —Å–≤–∏—Ç–∫–∏', icon: 'üìú', price: 10, type: 'resource' },
      { name: '–î—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏', icon: 'üíé', price: 15, type: 'resource' },
      { name: '–î—Ä–µ–≤–Ω–µ–µ –∑–µ–ª—å–µ', icon: 'üß™', price: 20, type: 'food', healing: 40 },
      { name: '–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç', icon: 'üìø', rarity: 'rare', type: 'amulet', defense: 2, luck: 3, price: 75 },
      { name: '–ó–∞—á–∞—Ä–æ–≤–∞–Ω–Ω—ã–π —à–ª–µ–º', icon: 'ü™ñ', rarity: 'epic', type: 'helmet', defense: 3, attack: 1, luck: 1, price: 100 },
      { name: '–ü–æ—Å–æ—Ö –º–∞–≥–∞', icon: '‚öîÔ∏è', rarity: 'rare', type: 'weapon', attack: 4, defense: 1, price: 100 }
    ],
    minGold: 5,
    maxGold: 12
  },
  {
    id: 'mountain',
    name: '–¢—É–º–∞–Ω–Ω—ã–µ –≥–æ—Ä—ã',
    icon: 'üóª',
    description: '–û–ø–∞—Å–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ç—Ä–æ–ø—ã —Å —Ä–µ–¥–∫–∏–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –∏ —Å–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏.',
    difficulty: 4,
    rewards: [
      { name: '–î—Ä–∞–∫–æ–Ω—å—è —á–µ—à—É—è', icon: 'üêâ', price: 20, type: 'resource' },
      { name: '–ú–∏—Ñ—Ä–∏–ª–æ–≤–∞—è —Ä—É–¥–∞', icon: 'üí†', price: 25, type: 'resource' },
      { name: '–î—Ä–∞–∫–æ–Ω—å–µ —Å–µ—Ä–¥—Ü–µ', icon: '‚ù§Ô∏è', price: 50, type: 'food', healing: 100 },
      { name: '–ö–æ–ª—å—Ü–æ –≤–ª–∞—Å—Ç–∏', icon: 'üëë', rarity: 'legendary', type: 'ring', attack: 3, defense: 2, luck: 2, price: 300 },
      { name: '–ú–∏—Ñ—Ä–∏–ª–æ–≤—ã–π –º–µ—á', icon: '‚öîÔ∏è', rarity: 'rare', type: 'weapon', attack: 5, price: 150 },
      { name: '–ê–º—É–ª–µ—Ç –¥—Ä–∞–∫–æ–Ω–∞', icon: 'üîÆ', rarity: 'legendary', type: 'amulet', defense: 3, attack: 3, luck: 2, price: 300 }
    ],
    minGold: 8,
    maxGold: 15
  }
];

function App() {
  const [isHikeOpen, setIsHikeOpen] = useState(false);
  const [items, setItems] = useState([]);
  const [isHiking, setIsHiking] = useState(false);
  const [hikeEndTime, setHikeEndTime] = useState(null);
  const [equipment, setEquipment] = useState({
    helmet: null,
    amulet: null,
    chest: null,
    ring: null,
    weapon: null,
    shield: null,
    legs: null,
    boots: null
  });
  const [gold, setGold] = useState(0);
  const [isShopOpen, setIsShopOpen] = useState(false);
  const [hikeResults, setHikeResults] = useState(null);
  const [isLocationSelectOpen, setIsLocationSelectOpen] = useState(false);
  const [currentLocation, setCurrentLocation] = useState('forest');
  const [autoHikeTime, setAutoHikeTime] = useState(null);
  const [health, setHealth] = useState(100);
  const [maxHealth, setMaxHealth] = useState(100);
  const baseHealthRegen = 0.2; // –ë–∞–∑–æ–≤–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤ —Å–µ–∫—É–Ω–¥—É
  const [isGameOver, setIsGameOver] = useState(false);
  const [showFoundSave, setShowFoundSave] = useState(false);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±–æ–Ω—É—Å –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è –æ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const totalHealthRegen = useMemo(() => {
    return Object.values(equipment)
      .filter(item => item && item.healthRegen)
      .reduce((sum, item) => sum + item.healthRegen, baseHealthRegen);
  }, [equipment]);

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
  useEffect(() => {
    if (health < maxHealth) {
      const healingInterval = setInterval(() => {
        setHealth(prevHealth => {
          const newHealth = Math.min(maxHealth, prevHealth + totalHealthRegen);
          return Number(newHealth.toFixed(1));
        });
      }, 1000);

      return () => clearInterval(healingInterval);
    }
  }, [health, maxHealth, totalHealthRegen]);

  const shopItems = useMemo(() => [
    // –ü—Ä–µ–¥–º–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    { name: "–ú–µ–¥–Ω—ã–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 1, luck: 1, rarity: "common", price: 15 },
    { name: "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 2, luck: 2, rarity: "uncommon", price: 35 },
    { name: "–ó–æ–ª–æ—Ç–æ–π –∞–º—É–ª–µ—Ç", icon: "üìø", type: "amulet", defense: 2, luck: 3, rarity: "rare", price: 75 },
    { name: "–ê–º—É–ª–µ—Ç –º—É–¥—Ä–æ—Å—Ç–∏", icon: "üìø", type: "amulet", defense: 3, attack: 1, luck: 2, rarity: "epic", price: 150 },
    { name: "–ê–º—É–ª–µ—Ç –¥—Ä–∞–∫–æ–Ω–∞", icon: "üîÆ", type: "amulet", defense: 3, attack: 3, luck: 2, rarity: "legendary", price: 300 },
    { name: "–ú–µ–¥–Ω–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 1, rarity: "common", price: 15 },
    { name: "–°–µ—Ä–µ–±—Ä—è–Ω–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 2, luck: 1, rarity: "uncommon", price: 35 },
    { name: "–ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ", icon: "üíç", type: "ring", attack: 2, luck: 2, rarity: "rare", price: 75 },
    { name: "–ö–æ–ª—å—Ü–æ —Å–∏–ª—ã", icon: "üíç", type: "ring", attack: 4, defense: -1, rarity: "epic", price: 150 },
    { name: "–ö–æ–ª—å—Ü–æ –≤–ª–∞—Å—Ç–∏", icon: "üëë", type: "ring", attack: 3, defense: 2, luck: 2, rarity: "legendary", price: 300 },
    { name: '–ö–æ–ª—å—Ü–æ –≤–∞–º–ø–∏—Ä–∞', icon: 'üíç', type: 'ring', rarity: 'epic', healthRegen: 0.3, price: 200 },
    { name: '–ü—Ä–æ–∫–ª—è—Ç—ã–π –∞–º—É–ª–µ—Ç', icon: 'üìø', type: 'amulet', rarity: 'rare', healthRegen: -0.1, attack: 5, price: 150 }
  ], []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
  const handleRestart = () => {
    setHealth(100);
    setGold(0);
    setItems([]);
    setEquipment({});
    setIsHiking(false);
    setHikeEndTime(null);
    setAutoHikeTime(null);
    setHikeResults(null);
    setIsGameOver(false);
  };

  const completeHike = () => {
    setIsHiking(false);
    
    const timeInMinutes = Math.abs(Math.floor((new Date() - hikeEndTime) / 60000));
    
    const location = locations.find(loc => loc.id === currentLocation);
    const baseDamage = Math.random() * 10 + 5;
    const timeDamage = timeInMinutes * 2;
    const locationDamage = location.difficulty * 2;
    const totalDamage = baseDamage + timeDamage + locationDamage;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
    setHealth(prevHealth => {
      const newHealth = Math.max(0, prevHealth - totalDamage);
      if (newHealth <= 0) {
        setIsGameOver(true);
        setAutoHikeTime(null);
        setHikeEndTime(null);
        return 0;
      }
      return Number(newHealth.toFixed(1));
    });

    // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
    if (health - totalDamage <= 0) {
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–æ–ª–æ—Ç–æ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
    const baseGold = Math.floor(Math.random() * (location.maxGold - location.minGold + 1)) + location.minGold;
    const timeBonus = Math.floor(timeInMinutes * 2);
    const totalGold = baseGold + timeBonus;
    
    setGold(prevGold => prevGold + totalGold);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
    const newItems = [];
    const itemCount = Math.floor(Math.random() * 3) + 1; // 1-3 –ø—Ä–µ–¥–º–µ—Ç–∞

    for (let i = 0; i < itemCount; i++) {
      const item = { ...location.rewards[Math.floor(Math.random() * location.rewards.length)] };
      if (Math.random() < 0.3) { // 30% —à–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        item.quantity = Math.floor(Math.random() * 3) + 2; // 2-4 –ø—Ä–µ–¥–º–µ—Ç–∞
      } else {
        item.quantity = 1;
      }
      newItems.push(item);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    setItems(prevItems => {
      const updatedItems = [...prevItems];
      newItems.forEach(newItem => {
        const existingItem = updatedItems.find(item => 
          item.name === newItem.name && 
          item.type === newItem.type &&
          item.healing === newItem.healing &&
          item.healthRegen === newItem.healthRegen
        );
        
        if (existingItem) {
          existingItem.quantity += newItem.quantity;
        } else {
          updatedItems.push(newItem);
        }
      });
      return updatedItems;
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Ö–æ–¥–∞
    setHikeResults({
      items: newItems,
      gold: totalGold
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Ö–æ–¥–∞
    setHikeEndTime(null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø–æ—Ö–æ–¥
    if (autoHikeTime !== null && health - totalDamage > 0) {
      startHike(autoHikeTime, true);
    } else {
      setHikeEndTime(null);
      setIsHiking(false);
    }
  };

  useEffect(() => {
    const timer = setInterval(() => {
      if (isHiking && hikeEndTime && new Date() >= hikeEndTime) {
        completeHike();
      }
    }, 1000);

    return () => clearInterval(timer);
  }, [isHiking, hikeEndTime, completeHike]);

  const handleHikeClick = () => {
    if (isHiking) return;
    setIsHikeOpen(true);
  };

  const startHike = (time, autoHike) => {
    if (health <= 0) return;
    
    setIsHiking(true);
    const endTime = new Date(new Date().getTime() + time * 60000);
    setHikeEndTime(endTime);
    if (autoHike) {
      setAutoHikeTime(time);
    }
  };

  const cancelHike = () => {
    setIsHiking(false);
    setHikeEndTime(null);
    setAutoHikeTime(null);
  };

  const handleEquipItem = (item) => {
    if (item.type === 'resource') return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞
    const currentItem = equipment[item.type];

    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
    setEquipment(prev => ({
      ...prev,
      [item.type]: { ...item, quantity: undefined } // –£–±–∏—Ä–∞–µ–º quantity —É –Ω–∞–¥–µ—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    }));

    // –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º quantity
    setItems(prev => {
      const newItems = prev.map(i => {
        if (i === item) {
          if (i.quantity > 1) {
            return { ...i, quantity: i.quantity - 1 };
          }
          return null;
        }
        return i;
      }).filter(Boolean);

      // –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –±—ã–ª –ø—Ä–µ–¥–º–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      if (currentItem) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∂–µ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        const existingItem = newItems.find(i =>
          i.name === currentItem.name &&
          i.type === currentItem.type &&
          i.defense === currentItem.defense &&
          i.attack === currentItem.attack &&
          i.luck === currentItem.luck
        );

        if (existingItem) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          existingItem.quantity = (existingItem.quantity || 1) + 1;
          return newItems;
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å quantity = 1
          return [...newItems, { ...currentItem, quantity: 1 }];
        }
      }
      return newItems;
    });
  };

  const handleUnequipItem = (slotId, item) => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
    setEquipment(prev => ({
      ...prev,
      [slotId]: null
    }));

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    setItems(prev => {
      // –ò—â–µ–º —Ç–∞–∫–æ–π –∂–µ –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
      const existingItem = prev.find(i =>
        i.name === item.name &&
        i.type === item.type &&
        i.defense === item.defense &&
        i.attack === item.attack &&
        i.luck === item.luck
      );

      if (existingItem) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return prev.map(i =>
          i === existingItem
            ? { ...i, quantity: i.quantity + 1 }
            : i
        );
      } else {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å quantity = 1
        return [...prev, { ...item, quantity: 1 }];
      }
    });
  };

  const handleSellItem = (item, quantity) => {
    setGold(prev => prev + item.price * quantity);

    setItems(prev => {
      if (item.quantity > quantity) {
        return prev.map(i =>
          i === item
            ? { ...i, quantity: i.quantity - quantity }
            : i
        );
      } else {
        return prev.filter(i => i !== item);
      }
    });
  };

  const handleBuyItem = (item) => {
    if (gold >= item.price) {
      setGold(prevGold => prevGold - item.price);
      setItems(prevItems => [...prevItems, { ...item, quantity: 1 }]);
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ data-location
  useEffect(() => {
    const root = document.getElementById('root');
    if (root) {
      root.setAttribute('data-location', currentLocation);
    }
  }, [currentLocation]);

  const useItem = (item) => {
    if (item.type === 'food' && health < maxHealth) {
      const newHealth = Math.min(maxHealth, health + item.healing);
      setHealth(newHealth);
      
      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
      setItems(prevItems => {
        const itemIndex = prevItems.findIndex(i => 
          i.name === item.name && 
          i.type === item.type && 
          i.healing === item.healing
        );
        
        if (itemIndex === -1) return prevItems;
        
        const newItems = [...prevItems];
        if (newItems[itemIndex].quantity > 1) {
          newItems[itemIndex] = {
            ...newItems[itemIndex],
            quantity: newItems[itemIndex].quantity - 1
          };
        } else {
          newItems.splice(itemIndex, 1);
        }
        
        return newItems;
      });
    }
  };

  useEffect(() => {
    if (hikeResults) {
      const timer = setTimeout(() => {
        setHikeResults(null);
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [hikeResults]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    const savedState = localStorage.getItem('gameState');
    
    if (!savedState) {
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
      return;
    }

    try {
      const parsed = JSON.parse(savedState);
      console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:', parsed);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
      const hasProgress = 
        parsed.gold > 0 || 
        (parsed.items && parsed.items.length > 0) || 
        (parsed.equipment && Object.keys(parsed.equipment).length > 0) || 
        parsed.health !== 100;

      if (hasProgress) {
        console.log('–ù–∞–π–¥–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥');
        setShowFoundSave(true);
      } else {
        console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
        startNewGame();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      startNewGame();
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const loadGame = () => {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
    const savedState = localStorage.getItem('gameState');
    
    if (!savedState) {
      console.error('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
      return;
    }

    try {
      const parsed = JSON.parse(savedState);
      console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', parsed);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setHealth(parsed.health ?? 100);
      setMaxHealth(parsed.maxHealth ?? 100);
      setGold(parsed.gold ?? 0);
      setItems(parsed.items ?? []);
      setEquipment(parsed.equipment ?? {});
      setCurrentLocation(parsed.currentLocation ?? 'forest');
      setIsHiking(false); // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–µ –≤ –ø–æ—Ö–æ–¥–µ
      setHikeEndTime(null);
      setAutoHikeTime(null);
      setIsGameOver(false);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setShowFoundSave(false);

      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      startNewGame();
    }
  };

  // –ù–æ–≤–∞—è –∏–≥—Ä–∞
  const startNewGame = () => {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É');
    localStorage.removeItem('gameState');
    
    setHealth(100);
    setMaxHealth(100);
    setGold(0);
    setItems([]);
    setEquipment({});
    setCurrentLocation('forest');
    setIsHiking(false);
    setHikeEndTime(null);
    setAutoHikeTime(null);
    setIsGameOver(false);
    setShowFoundSave(false);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
  const saveGame = useCallback(() => {
    if (showFoundSave) {
      console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞');
      return;
    }

    const gameState = {
      health,
      maxHealth,
      gold,
      items,
      equipment,
      currentLocation,
      isHiking,
      hikeEndTime: hikeEndTime?.getTime(),
      autoHikeTime
    };

    try {
      localStorage.setItem('gameState', JSON.stringify(gameState));
      console.log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error);
    }
  }, [health, maxHealth, gold, items, equipment, currentLocation, isHiking, hikeEndTime, autoHikeTime, showFoundSave]);

  // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  useEffect(() => {
    if (!showFoundSave && health > 0) {
      const timer = setTimeout(saveGame, 1000); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      return () => clearTimeout(timer);
    }
  }, [saveGame, showFoundSave, health]);

  return (
    <div className="app-container">
      <div className="interface-container">
        <Character
          onHikeClick={() => setIsHikeOpen(true)}
          equipment={equipment}
          isHiking={isHiking}
          onCancelHike={cancelHike}
          onUnequipItem={handleUnequipItem}
          gold={gold}
          onShopClick={() => setIsShopOpen(true)}
          onLocationClick={() => setIsLocationSelectOpen(true)}
          health={health}
          maxHealth={maxHealth}
          healthRegen={totalHealthRegen}
        />
        <Hike
          isOpen={isHikeOpen}
          onClose={() => setIsHikeOpen(false)}
          onStartHike={startHike}
          isHiking={isHiking}
        />
        {isHiking && <HikeStatus endTime={hikeEndTime} />}
        <Items
          items={items}
          onEquipItem={handleEquipItem}
          onSellItem={handleSellItem}
          onUseItem={useItem}
        />
      </div>
      {isShopOpen && (
        <Shop
          items={shopItems}
          gold={gold}
          onBuyItem={handleBuyItem}
          onClose={() => setIsShopOpen(false)}
        />
      )}
      {hikeResults && (
        <HikeResults
          items={hikeResults.items}
          gold={hikeResults.gold}
          onClose={() => setHikeResults(null)}
        />
      )}
      <ChooseLocation
        isOpen={isLocationSelectOpen}
        onClose={() => setIsLocationSelectOpen(false)}
        onSelectLocation={setCurrentLocation}
        currentLocation={currentLocation}
        locations={locations}
      />
      {isGameOver && <GameOver onRestart={handleRestart} />}
      {showFoundSave && (
        <FoundSave
          onContinue={() => {
            console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å');
            loadGame();
          }}
          onNewGame={() => {
            console.log('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã');
            startNewGame();
          }}
        />
      )}
    </div>
  );
}

export default App;
